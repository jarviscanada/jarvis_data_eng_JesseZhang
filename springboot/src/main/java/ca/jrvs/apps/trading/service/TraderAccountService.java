package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Position;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.domain.TraderAccountView;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class TraderAccountService {

  private TraderDao traderDao;
  private AccountDao accountDao;
  private PositionDao positionDao;
  private SecurityOrderDao securityOrderDao;

  @Autowired
  public TraderAccountService(TraderDao traderDao, AccountDao accountDao, PositionDao positionDao,
      SecurityOrderDao securityOrderDao) {
    this.traderDao = traderDao;
    this.accountDao = accountDao;
    this.positionDao = positionDao;
    this.securityOrderDao = securityOrderDao;
  }

  /**
   * Create a new trader and initialize a new account with 0 amount. - validate user input (all
   * fields must be non-empty) - create a trader - create an account - create, setup, and return a
   * new traderAccountView
   * <p>
   * Assumption: to simplify the logic, each trader has only one account where traderId ==
   * accountId
   *
   * @param trader cannot be null. All fields cannot be null except for id (auto-generated by db)
   * @return traderAccountView
   * @throws IllegalArgumentException if a trader has null fields or id is not null
   */
  public TraderAccountView createTraderAndAccount(Trader trader) {

    if (trader.getId() != null || trader.getCountry() == null || trader.getDob() == null
        || trader.getEmail() == null
        || trader.getFirstName() == null || trader.getLastName() == null) {
      throw new IllegalArgumentException("the trader has null fields or id is not null");
    }

    traderDao.save(trader);
    Account account = new Account();
    account.setAmount(0.0f);
    account.setTrader_id(trader.getId());
    accountDao.save(account);

    return new TraderAccountView(trader, account);
  }

  /**
   * A trader can be deleted iff it has no open position and 0 cash balance - validate traderID -
   * get trader account by traderId and check account balance - get positions by accountId and check
   * positions - delete all securityOrders, account, trader (in this order)
   *
   * @param traderId must not be null
   * @throws IllegalArgumentException if tradeId is null or not found or unable to delete
   */
  public void deleteTraderById(Integer traderId) {

    if (traderId == null || !traderDao.existsById(traderId)) {
      throw new IllegalArgumentException("tradeId is null or not found");
    }

    Account account = null;
    if (accountDao.findById(traderId).isPresent()) {
      account = accountDao.findById(traderId).get();
    }

    assert account != null;
    if (account.getAmount() != 0) {
      throw new IllegalArgumentException("there is still balance in the account");
    }

    Position position;
    if (positionDao.findById(account.getId()).isPresent()) {
      throw new IllegalArgumentException("there is still open position");
    }

    securityOrderDao.deleteByAccountId(account.getId());
    accountDao.deleteById(account.getId());
    traderDao.deleteById(traderId);

  }

  /**
   * Deposit a fund to an account by traderId - validate user input - account =
   * accountDao.findByTraderId - accountDao.updateAmountById
   *
   * @param traderId must not be null
   * @param fund     must be greater than 0
   * @return updated Account
   * @throws IllegalArgumentException if traderId is null or not found, and fund is less or equal to
   *                                  0
   */
  public Account deposit(Integer traderId, Double fund) {

    if (traderId == null || !traderDao.existsById(traderId)) {
      throw new IllegalArgumentException("tradeId is null or not found");
    }

    if (fund <= 0) {
      throw new IllegalArgumentException("fund must be greater than 0");
    }

    Account account = null;
    if (accountDao.findByTraderId(traderId).isPresent()) {
      account = accountDao.findByTraderId(traderId).get();
      account.setAmount((float) (account.getAmount() + fund));
      accountDao.updateAmountById(account.getId(), account.getAmount());
      System.out.println(accountDao.findByTraderId(traderId).get());
//      return account;
      return accountDao.findByTraderId(traderId).get();
    } else {
      throw new IllegalArgumentException("tradeId is not found");
    }

  }


  /**
   * Withdraw a fund to an account by traderId
   * <p>
   * - validate user input - account = accountDao.findByTraderId - accountDao.updateAmountById
   *
   * @param traderId trader ID
   * @param fund     amount can't be 0
   * @return updated Account
   * @throws IllegalArgumentException if traderId is null or not found, fund is less or equal to 0,
   *                                  and insufficient fund
   */
  public Account withdraw(Integer traderId, Double fund) {

    if (traderId == null || !traderDao.existsById(traderId)) {
      throw new IllegalArgumentException("tradeId is null or not found");
    }

    if (fund <= 0) {
      throw new IllegalArgumentException("fund must be greater than 0");
    }

    Account account = null;
    if (accountDao.findByTraderId(traderId).isPresent()) {
      account = accountDao.findByTraderId(traderId).get();
//      System.out.println(account);
//      System.out.println(account.getAmount());
      if (account.getAmount() - fund < 0) {
        throw new IllegalArgumentException("insufficient fund");
      }

      account = accountDao.findByTraderId(traderId).get();
      account.setAmount((float) (account.getAmount() - fund));
      accountDao.updateAmountById(account.getId(), account.getAmount());
//      System.out.println(accountDao.findByTraderId(traderId).get());

//      System.out.println(accountDao.findByTraderId(traderId).get());
      return accountDao.findByTraderId(traderId).get();
    } else {
      throw new IllegalArgumentException("tradeId is not found");
    }

  }


}
